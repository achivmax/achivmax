{"version":3,"sources":["webpack:///component---src-pages-css-grid-02-first-grid-js-75d38a02581f2988c6f9.js","webpack:///./src/pages/css-grid/02-first-grid.js"],"names":["webpackJsonp","217","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_Main","_Main2","_CodeBlock","_CodeBlock2","_DevHomework","_DevHomework2","_CodepenLink","_CodepenLink2","_DownloadLink","_DownloadLink2","Tutorial","createElement","className","link","Homework","title","content","currentPageNum","tutorial","homework"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YA4BA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GA1BvFH,EAAQI,YAAa,CCPtB,IAAAE,GAAAL,EAAA,GDWKM,EAAUL,EAAuBI,GCVtCE,EAAAP,EAAA,IDcKQ,EAASP,EAAuBM,GCbrCE,EAAAT,EAAA,IDiBKU,EAAcT,EAAuBQ,GChB1CE,EAAAX,EAAA,IDoBKY,EAAgBX,EAAuBU,GCnB5CE,EAAAb,EAAA,IDuBKc,EAAgBb,EAAuBY,GCtB5CE,EAAAf,EAAA,ID0BKgB,EAAiBf,EAAuBc,GCxBvCE,EAAW,iBACfX,GAAAF,QAAAc,cAAA,WACEZ,EAAAF,QAAAc,cAAA,6BAEAZ,EAAAF,QAAAc,cAAA,2BACAZ,EAAAF,QAAAc,cAAA,iGACwF,IACtFZ,EAAAF,QAAAc,cAAA,6BAFF,mFAGeZ,EAAAF,QAAAc,cAAA,yBAHf,KAMAZ,EAAAF,QAAAc,cAAA,qCACAZ,EAAAF,QAAAc,cAAA,yGACgG,IAC9FZ,EAAAF,QAAAc,cAAA,qCAFF,QAEyCZ,EAAAF,QAAAc,cAAA,kCAFzC,uLAOAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,8FAOAE,EAAAF,QAAAc,cAAA,6DAEAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,iEAMAE,EAAAF,QAAAc,cAAA,8CAEAZ,EAAAF,QAAAc,cAAA,0BAEAZ,EAAAF,QAAAc,cAAA,6FAEAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,kCAMAE,EAAAF,QAAAc,cAAA,wKAEiEZ,EAAAF,QAAAc,cAAA,+BAA6B,IAF9F,OAGMZ,EAAAF,QAAAc,cAAA,4BAHN,wBAMAZ,EAAAF,QAAAc,cAAA,+DAEAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,8PAaAE,EAAAF,QAAAc,cAAA,uEAEAZ,EAAAF,QAAAc,cAAAR,EAAAN,QAAA,wJAUAE,EAAAF,QAAAc,cAAA,gCAEAZ,EAAAF,QAAAc,cAAA,OAAKC,UAAU,eACbb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,SACfb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,SACfb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,SACfb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,SACfb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,SACfb,EAAAF,QAAAc,cAAA,OAAKC,UAAU,UAGjBb,EAAAF,QAAAc,cAAAJ,EAAAV,SAAagB,KAAK,sDAIhBC,EAAW,iBACff,GAAAF,QAAAc,cAAAN,EAAAR,SAAakB,MAAM,sCACjBhB,EAAAF,QAAAc,cAAA,sJAEgDZ,EAAAF,QAAAc,cAAA,wBAFhD,qBAGEZ,EAAAF,QAAAc,cAAA,+BAHF,QAGmCZ,EAAAF,QAAAc,cAAA,4BAHnC,kEAOAZ,EAAAF,QAAAc,cAAA,gNAGa,IACXZ,EAAAF,QAAAc,cAAAF,EAAAZ,SAAcmB,QAAQ,kBAAtB,sCAJF,4DAQAjB,EAAAF,QAAAc,cAAA,2FD+GHnB,GAAQK,QC3GM,iBAAME,GAAAF,QAAAc,cAAAV,EAAAJ,SAAMoB,eAAgB,EAAGC,SAAUnB,EAAAF,QAAAc,cAACD,EAAD,MAAcS,SAAUpB,EAAAF,QAAAc,cAACG,EAAD,SD+G/EvB,EAAOC,QAAUA,EAAiB","file":"component---src-pages-css-grid-02-first-grid-js-75d38a02581f2988c6f9.js","sourcesContent":["webpackJsonp([234804948918196],{\n\n/***/ 217:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _Main = __webpack_require__(17);\n\t\n\tvar _Main2 = _interopRequireDefault(_Main);\n\t\n\tvar _CodeBlock = __webpack_require__(15);\n\t\n\tvar _CodeBlock2 = _interopRequireDefault(_CodeBlock);\n\t\n\tvar _DevHomework = __webpack_require__(12);\n\t\n\tvar _DevHomework2 = _interopRequireDefault(_DevHomework);\n\t\n\tvar _CodepenLink = __webpack_require__(27);\n\t\n\tvar _CodepenLink2 = _interopRequireDefault(_CodepenLink);\n\t\n\tvar _DownloadLink = __webpack_require__(16);\n\t\n\tvar _DownloadLink2 = _interopRequireDefault(_DownloadLink);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Tutorial = function Tutorial() {\n\t    return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(\n\t            'h2',\n\t            null,\n\t            'Your First Grid'\n\t        ),\n\t        _react2.default.createElement(\n\t            'h4',\n\t            null,\n\t            'Create a grid'\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'The first thing we want to do is create a grid container. We can do this by declaring',\n\t            ' ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'display: grid'\n\t            ),\n\t            ' on the container element. In this example we are using a div with the class of ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'container'\n\t            ),\n\t            '.'\n\t        ),\n\t        _react2.default.createElement(\n\t            'h4',\n\t            null,\n\t            'Define rows and columns'\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'There are several ways to define rows and columns. For our first grid, we will use properties',\n\t            ' ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-template-columns'\n\t            ),\n\t            ' and ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-template-rows'\n\t            ),\n\t            '. These properties allow us to define the size of the rows and columns for our grid. To create two fixed-height rows of 150px and three fixed-width columns of 150px, simply write:'\n\t        ),\n\t        _react2.default.createElement(\n\t            _CodeBlock2.default,\n\t            null,\n\t            '\\ngrid-template-columns: 150px 150px 150px;\\ngrid-template-rows: 150px 150px;\\n      '\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'To add a fourth column that is 70px wide, write:'\n\t        ),\n\t        _react2.default.createElement(\n\t            _CodeBlock2.default,\n\t            null,\n\t            '\\ngrid-template-columns: 150px 150px 150px 70px;\\n      '\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            '...and so on to add more columns.'\n\t        ),\n\t        _react2.default.createElement(\n\t            'h4',\n\t            null,\n\t            'Add a gutter'\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'Adding a gutter to your grid is amazingly easy with CSS Grid Layout. Simply add:'\n\t        ),\n\t        _react2.default.createElement(\n\t            _CodeBlock2.default,\n\t            null,\n\t            '\\ngrid-gap: 1rem;\\n      '\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'That simple line gives you an equal-sized gutter between all rows and columns. To define the gutter size for columns and rows individually, you can use the ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-column-gap'\n\t            ),\n\t            ' ',\n\t            'and ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-row-gap'\n\t            ),\n\t            ' properties instead.'\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'Now let\\'s put that all together. Here is our HTML:'\n\t        ),\n\t        _react2.default.createElement(\n\t            _CodeBlock2.default,\n\t            null,\n\t            '\\n<div class=\"container\">\\n  <div class=\"item item1\"></div>\\n  <div class=\"item item2\"></div>\\n  <div class=\"item item3\"></div>\\n  <div class=\"item item4\"></div>\\n  <div class=\"item item5\"></div>\\n  <div class=\"item item6\"></div>\\n</div>\\n      '\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'With just a few lines of CSS, we can create a simple grid:'\n\t        ),\n\t        _react2.default.createElement(\n\t            _CodeBlock2.default,\n\t            null,\n\t            '\\n.container {\\n  display: grid;\\n  grid-template-columns: 150px 150px 150px;\\n  grid-template-rows: 150px 150px;\\n  grid-gap: 1rem;\\n}\\n      '\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'Here is the result:'\n\t        ),\n\t        _react2.default.createElement(\n\t            'div',\n\t            { className: 'container-2' },\n\t            _react2.default.createElement('div', { className: 'item' }),\n\t            _react2.default.createElement('div', { className: 'item' }),\n\t            _react2.default.createElement('div', { className: 'item' }),\n\t            _react2.default.createElement('div', { className: 'item' }),\n\t            _react2.default.createElement('div', { className: 'item' }),\n\t            _react2.default.createElement('div', { className: 'item' })\n\t        ),\n\t        _react2.default.createElement(_CodepenLink2.default, { link: 'https://codepen.io/mozilladevelopers/pen/veXQmp' })\n\t    );\n\t};\n\t\n\tvar Homework = function Homework() {\n\t    return _react2.default.createElement(\n\t        _DevHomework2.default,\n\t        { title: 'Firefox DevTools + CSS Grid Layout' },\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'Amazing right? Inspect the grid above with your browser\\'s developer tools. Try changing the column width, or the row height. Swap out the ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-gap'\n\t            ),\n\t            ' property with the',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-column-gap'\n\t            ),\n\t            ' and ',\n\t            _react2.default.createElement(\n\t                'code',\n\t                null,\n\t                'grid-row-gap'\n\t            ),\n\t            ' properties and play around with different widths and heights.'\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'Having a good set of developer tools when working with CSS Grid Layout is essential. Firefox has some fantastic features that are specifically built to help you create and design grids. Intrigued?',\n\t            ' ',\n\t            _react2.default.createElement(\n\t                _DownloadLink2.default,\n\t                { content: 'cssgrid-page-2' },\n\t                'Download Firefox Developer Edition'\n\t            ),\n\t            ' to get the browser with the best CSS Grid Layout tools.'\n\t        ),\n\t        _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            'Click to the next section to learn about Firefox\\'s new CSS Grid Layout panel.'\n\t        )\n\t    );\n\t};\n\t\n\texports.default = function () {\n\t    return _react2.default.createElement(_Main2.default, { currentPageNum: 2, tutorial: _react2.default.createElement(Tutorial, null), homework: _react2.default.createElement(Homework, null) });\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-css-grid-02-first-grid-js-75d38a02581f2988c6f9.js","import React from 'react';\r\nimport Main from './components/_Main';\r\nimport CodeBlock from '../../components/CodeBlock';\r\nimport DevHomework from '../../components/layout/DevHomework';\r\nimport CodepenLink from '../../components/CodepenLink';\r\nimport DownloadLink from '../../components/DownloadLink';\r\n\r\nconst Tutorial = () => (\r\n  <div>\r\n    <h2>Your First Grid</h2>\r\n\r\n    <h4>Create a grid</h4>\r\n    <p>\r\n      The first thing we want to do is create a grid container. We can do this by declaring{' '}\r\n      <code>display: grid</code> on the container element. In this example we are using a div with\r\n      the class of <code>container</code>.\r\n    </p>\r\n\r\n    <h4>Define rows and columns</h4>\r\n    <p>\r\n      There are several ways to define rows and columns. For our first grid, we will use properties{' '}\r\n      <code>grid-template-columns</code> and <code>grid-template-rows</code>. These properties allow\r\n      us to define the size of the rows and columns for our grid. To create two fixed-height rows of\r\n      150px and three fixed-width columns of 150px, simply write:\r\n    </p>\r\n\r\n    <CodeBlock>\r\n      {`\r\ngrid-template-columns: 150px 150px 150px;\r\ngrid-template-rows: 150px 150px;\r\n      `}\r\n    </CodeBlock>\r\n\r\n    <p>To add a fourth column that is 70px wide, write:</p>\r\n\r\n    <CodeBlock>\r\n      {`\r\ngrid-template-columns: 150px 150px 150px 70px;\r\n      `}\r\n    </CodeBlock>\r\n\r\n    <p>...and so on to add more columns.</p>\r\n\r\n    <h4>Add a gutter</h4>\r\n\r\n    <p>Adding a gutter to your grid is amazingly easy with CSS Grid Layout. Simply add:</p>\r\n\r\n    <CodeBlock>\r\n      {`\r\ngrid-gap: 1rem;\r\n      `}\r\n    </CodeBlock>\r\n\r\n    <p>\r\n      That simple line gives you an equal-sized gutter between all rows and columns. To define the\r\n      gutter size for columns and rows individually, you can use the <code>grid-column-gap</code>{' '}\r\n      and <code>grid-row-gap</code> properties instead.\r\n    </p>\r\n\r\n    <p>Now let's put that all together. Here is our HTML:</p>\r\n\r\n    <CodeBlock>\r\n      {`\r\n<div class=\"container\">\r\n  <div class=\"item item1\"></div>\r\n  <div class=\"item item2\"></div>\r\n  <div class=\"item item3\"></div>\r\n  <div class=\"item item4\"></div>\r\n  <div class=\"item item5\"></div>\r\n  <div class=\"item item6\"></div>\r\n</div>\r\n      `}\r\n    </CodeBlock>\r\n\r\n    <p>With just a few lines of CSS, we can create a simple grid:</p>\r\n\r\n    <CodeBlock>\r\n      {`\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: 150px 150px 150px;\r\n  grid-template-rows: 150px 150px;\r\n  grid-gap: 1rem;\r\n}\r\n      `}\r\n    </CodeBlock>\r\n    <p>Here is the result:</p>\r\n\r\n    <div className=\"container-2\">\r\n      <div className=\"item\" />\r\n      <div className=\"item\" />\r\n      <div className=\"item\" />\r\n      <div className=\"item\" />\r\n      <div className=\"item\" />\r\n      <div className=\"item\" />\r\n    </div>\r\n\r\n    <CodepenLink link=\"https://codepen.io/mozilladevelopers/pen/veXQmp\" />\r\n  </div>\r\n);\r\n\r\nconst Homework = () => (\r\n  <DevHomework title=\"Firefox DevTools + CSS Grid Layout\">\r\n    <p>\r\n      Amazing right? Inspect the grid above with your browser's developer tools. Try changing the\r\n      column width, or the row height. Swap out the <code>grid-gap</code> property with the\r\n      <code>grid-column-gap</code> and <code>grid-row-gap</code> properties and play around with\r\n      different widths and heights.\r\n    </p>\r\n\r\n    <p>\r\n      Having a good set of developer tools when working with CSS Grid Layout is essential. Firefox\r\n      has some fantastic features that are specifically built to help you create and design grids.\r\n      Intrigued?{' '}\r\n      <DownloadLink content=\"cssgrid-page-2\">Download Firefox Developer Edition</DownloadLink> to get\r\n      the browser with the best CSS Grid Layout tools.\r\n    </p>\r\n\r\n    <p>Click to the next section to learn about Firefox's new CSS Grid Layout panel.</p>\r\n  </DevHomework>\r\n);\r\n\r\nexport default () => <Main currentPageNum={2} tutorial={<Tutorial />} homework={<Homework />} />;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/css-grid/02-first-grid.js"],"sourceRoot":""}